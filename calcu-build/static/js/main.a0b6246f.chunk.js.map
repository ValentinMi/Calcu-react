{"version":3,"sources":["components/opeButton.jsx","components/nbrButton.jsx","components/screen.jsx","components/calculator.jsx","App.js","serviceWorker.js","index.js"],"names":["OpeButton","_ref","name","handleClick","className","react_default","a","createElement","onClick","NbrButton","value","Screen","type","readOnly","Calculator","_useState","useState","_useState2","Object","slicedToArray","value1","setValue1","_useState3","_useState4","value2","setValue2","_useState5","_useState6","operator","setOperator","_useState7","_useState8","screenValue","setScreenValue","handleClear","useEffect","screen","map","nbr","nbrButton","key","concat","btn","opeButton","func","ope","console","log","result","float1","parseFloat","float2","handleResult","App","components_calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0b6246f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst OpeButton = ({ name, handleClick, className }) => {\n  return (\n    <button className={className + \" btn\"} onClick={() => handleClick()}>\n      {name}\n    </button>\n  );\n};\n\nexport default OpeButton;\n","import React from \"react\";\n\nconst NbrButton = ({ value, handleClick }) => {\n  return (\n    <button className=\"btn\" onClick={() => handleClick()}>\n      {value}\n    </button>\n  );\n};\n\nexport default NbrButton;\n","import React from \"react\";\n\nconst Screen = ({ value }) => {\n  return <input className=\"screen input\" type=\"text\" value={value} readOnly />;\n};\n\nexport default Screen;\n","import React, { useState, useEffect } from \"react\";\nimport OpeButton from \"./opeButton\";\nimport NbrButton from \"./nbrButton\";\nimport Screen from \"./screen\";\nimport \"../styles/calculator.css\";\n\nconst Calculator = () => {\n  const [value1, setValue1] = useState(\"\");\n  const [value2, setValue2] = useState(\"\");\n  const [operator, setOperator] = useState(\"\");\n  const [screenValue, setScreenValue] = useState(0);\n\n  const opeButtons = [\n    { name: \"+\" },\n    { name: \"-\" },\n    { name: \"x\" },\n    { name: \"/\" }\n  ];\n\n  const nbrButtons = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, \".\"];\n\n  const handleResult = () => {\n    if (operator === \"\") return console.log(\"no ope\");\n    let result;\n    let float1 = parseFloat(value1);\n    let float2 = parseFloat(value2);\n    // Check operator and calcul\n    switch (operator) {\n      case \"+\":\n        result = float1 + float2;\n        break;\n      case \"-\":\n        result = float1 - float2;\n        break;\n      case \"x\":\n        result = float1 * float2;\n        break;\n      case \"/\":\n        result = float1 / float2;\n        break;\n      default:\n        break;\n    }\n    // Clean screen & assign result to value1\n    handleClear();\n    setValue1(result);\n  };\n\n  const handleNbrClick = value => {\n    // Check if operator is undefined\n    if (operator === \"\") {\n      // If yes set value 1\n      setValue1(`${value1}${value}`);\n      setScreenValue(value);\n    } else {\n      // If ope set value2 and refresh screen with ope\n      setValue2(`${value2}${value}`);\n    }\n  };\n\n  const handleOpeClick = ope => {\n    // Check if we have a first value\n    if (value1 === \"\") return;\n    setOperator(ope);\n  };\n\n  const handleClear = () => {\n    // Reset to initial states\n    setValue1(\"\");\n    setValue2(\"\");\n    setOperator(\"\");\n  };\n\n  useEffect(() => {\n    // Update the screen after each change\n    setScreenValue(value1 + \" \" + operator + \" \" + value2);\n  }, [value1, operator, value2]);\n\n  return (\n    <div className=\"calculator\">\n      <Screen value={screenValue} />\n      <div className=\"keyboard\">\n        <div>\n          <button onClick={() => handleClear()} className=\"clear-btn\">\n            CLEAR\n          </button>\n          <div className=\"nbr-btn\">\n            {nbrButtons.map(nbr => (\n              <NbrButton\n                key={nbr}\n                value={nbr}\n                handleClick={() => handleNbrClick(nbr)}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"ope-btn\">\n          {opeButtons.map(btn => (\n            <OpeButton\n              key={btn.name}\n              name={btn.name}\n              func={btn.func}\n              className={btn.className}\n              handleClick={() => handleOpeClick(btn.name)}\n            />\n          ))}\n          <button className=\"equal-btn btn\" onClick={() => handleResult()}>\n            =\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React from \"react\";\nimport Calculator from \"./components/calculator\";\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}